# Generated by Django 2.1.3 on 2018-12-03 06:49

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=100)),
                ('surename', models.CharField(max_length=100)),
                ('active', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='AdResponse',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('favorite', models.BooleanField(default=False)),
                ('chosen', models.BooleanField(default=False)),
                ('datetime_responded', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Advertisement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('AD_TYPE_BARTER_TRADE', 'Exchange and trade of goods/materials'), ('AD_TYPE_PLAYER_BOUNTY', 'Player bounty'), ('AD_TYPE_SEEK_PROTECTION', 'Seeking protection'), ('AD_TYPE_OFFER_PROTECTION', 'Offering protection')], max_length=50, verbose_name='Advertisement type')),
                ('combat_rank', models.CharField(blank=True, choices=[('AD_COMBAT_RANK_HARMLESS', 'Harmless'), ('AD_COMBAT_RANK_HARMLESS', 'Mostly Harmless'), ('AD_COMBAT_RANK_NOVICE', 'Novice'), ('AD_COMBAT_RANK_COMPETENT', 'Competent'), ('AD_COMBAT_RANK_EXPERT', 'Expert'), ('AD_COMBAT_RANK_MASTER', 'Master'), ('AD_COMBAT_RANK_DANGEROUS', 'Dangerous'), ('AD_COMBAT_RANK_DEADLY', 'Deadly'), ('AD_COMBAT_RANK_ELITE', 'Elite')], max_length=50, null=True, verbose_name='Combat rank')),
                ('hours_in_game', models.PositiveIntegerField(default=0)),
                ('crew_member', models.BooleanField(default=False)),
                ('wing_member', models.BooleanField(default=True)),
                ('combat_role', models.CharField(choices=[('AD_COMBAT_ROLE_ATTACKER', 'Attacker'), ('AD_COMBAT_ROLE_DEFENDER', 'Defender'), ('AD_COMBAT_ROLE_SUPPORT', 'Support')], max_length=50, null=True, verbose_name='Combat role')),
                ('legal', models.BooleanField(default=False)),
                ('payment_pro_bono', models.BooleanField(default=False)),
                ('payment_units', models.PositiveIntegerField(default=0)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('activities_involved', models.ManyToManyField(related_name='ads_with_activity', to='server.Activity')),
            ],
        ),
        migrations.CreateModel(
            name='Body',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name of body')),
                ('ref_eddb_body_id', models.PositiveIntegerField(blank=True, null=True)),
                ('located_near', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='server.Body')),
            ],
        ),
        migrations.CreateModel(
            name='Commander',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.CharField(max_length=300)),
                ('meetup_datetime', models.DateTimeField(blank=True, null=True)),
                ('datetime_sent', models.DateTimeField(auto_now_add=True)),
                ('ad_response', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_communication', to='server.AdResponse')),
                ('commander_from', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to='server.Commander')),
                ('commander_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recieved_messages', to='server.Commander')),
            ],
        ),
        migrations.CreateModel(
            name='StarSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name of star system')),
                ('ref_eddb_system_id', models.PositiveIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Station',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name of station')),
                ('ref_eddb_station_id', models.PositiveIntegerField(blank=True, null=True)),
                ('located_in_system', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='server.StarSystem')),
                ('located_near', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='server.Body')),
            ],
        ),
        migrations.CreateModel(
            name='Tradeable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('unit_type', models.CharField(choices=[('UNIT_TON', 'In tons'), ('UNIT_PIECE', 'In pieces')], max_length=50, verbose_name='Type of measurement')),
                ('rare', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='TradeableCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='icons/')),
            ],
        ),
        migrations.AddField(
            model_name='tradeable',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tradeables_in_category', to='server.TradeableCategory'),
        ),
        migrations.AddField(
            model_name='message',
            name='meetup_station',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mentioned_in_messages', to='server.Station'),
        ),
        migrations.AddField(
            model_name='commander',
            name='station',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='server.Station'),
        ),
        migrations.AddField(
            model_name='commander',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commanders', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='advertisement',
            name='commander',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='server.Commander'),
        ),
        migrations.AddField(
            model_name='advertisement',
            name='payment_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='as_payment', to='server.Tradeable'),
        ),
        migrations.AddField(
            model_name='advertisement',
            name='station',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='server.Station'),
        ),
        migrations.AddField(
            model_name='advertisement',
            name='tradeable_from',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='as_tradeables_from', to='server.Tradeable'),
        ),
        migrations.AddField(
            model_name='advertisement',
            name='tradeable_to',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='as_tradeables_to', to='server.Tradeable'),
        ),
        migrations.AddField(
            model_name='adresponse',
            name='ad',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ad_responses_advert', to='server.Advertisement'),
        ),
        migrations.AddField(
            model_name='adresponse',
            name='commander',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ad_responses_commander', to='server.Commander'),
        ),
    ]
